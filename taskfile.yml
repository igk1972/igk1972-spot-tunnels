version: '3'

vars:
  DNS_ZONE: '{{.DNS_ZONE | default "domain.tld"}}'
  INVENTORY_FILE: '{{.INVENTORY_FILE | default "tunnels-inventory.yml"}}'
  USERS_FILE: '{{.USERS_FILE | default "tunnels-users.yml"}}'
  SSH_KEYS_PATH: '{{.SSH_KEYS_PATH | default "tunnels-ssh-keys"}}'
  SSH_KEYS_TYPE: '{{.SSH_KEYS_TYPE | default "ed25519"}}'
  SSH_LOGIN: '{{.SSH_LOGIN | default "root"}}'
  SSH_KEY: '{{.SSH_KEY | default "~/.ssh/id_ed25519"}}'
  SSH_OPTIONS: |
    -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
    -o LogLevel=ERROR {{.SSH_OPTIONS | default ""}} \
  LINK_NAME_PREFIX: '{{.LINK_NAME_PREFIX | default ""}}'
  #
  CONTAINER_NAMESPACE: '{{.CONTAINER_NAMESPACE | default "tunnels-glider"}}'
  CONTAINER_MEMORY: '{{.CONTAINER_MEMORY | default "64Mb"}}'
  #
  GLIDER_IMAGE: '{{.GLIDER_IMAGE | default "ghcr.io/nadoo/glider:0.16.4"}}'
  REPROXY_IMAGE: '{{.REPROXY_IMAGE | default "ghcr.io/umputun/reproxy:v1.2.3"}}'
  #
  SHADOWSOCK_CIPHER: '{{.SHADOWSOCK_CIPHER | default "chacha20-ietf-poly1305"}}'
  #
  NODES:
    sh: |
      yq -r -o csv \
      ".hosts[] | [ .name, .host, (.port // \"22\"), (.user // \"root\"), (.orchestrator // \"podman\"), (.tags // [] | join(\";\")), (.ssh_key // \"{{.SSH_KEY}}\") ]" \
      "{{.INVENTORY_FILE}}"
  #
  USERS:
    sh: |
      yq -r -o csv \
      ".users[] | [ .uuid, .name, (.vless_hosts // \"^\$\"), (.shadowsock_port // \"\"), (.shadowsock_pass // \"\"), (.shadowsock_hosts // \"^\$\") ]" \
      "{{.USERS_FILE}}"
  #

includes:
  podman:
    taskfile: podman.taskfile.yml
    internal: true

tasks:


  keys:
    silent: true
    cmds:
      - |
        cat << EOF
        {{$nodes := .NODES | default "" -}}
        {{$cipher := .SHADOWSOCK_CIPHER | default "" -}}
        {{$prefix := .LINK_NAME_PREFIX | default "" -}}
        {{range $_, $u := .USERS | default "" | splitLines}}
          {{if not (eq $u "") -}}
            {{$user := $u | split "," -}}
            {{$user._1 -}}
            {{$vless_hosts := $user._2 -}}
            {{$shadowsock_hosts := $user._5 -}}
            {{range $_, $n := $nodes | splitLines -}}
              {{if not (eq $n "") -}}
                {{$node := $n | split "," -}}
                {{$hostname := $node._0 -}}
                {{if not (eq $user._0 "") -}}
                  {{if (regexMatch $vless_hosts $hostname)}}
                    {{printf "vless://%s@%s:443?security=tls&type=ws&host=%s&path=/vless-%s#%s%s_vless_ws" $user._0 $node._1 $node._1 $user._0 $prefix $hostname}}
                  {{- end -}}
                {{- end -}}
                {{if not (eq $user._3 "") -}}
                  {{if (regexMatch $shadowsock_hosts $hostname)}}
                    {{printf "ss://%s@%s:%s#%s%s_shadowsocks" ((printf "%s:%s" $cipher $user._4) | b64enc) $node._1 $user._3 $prefix $hostname}}
                  {{- end -}}
                {{- end}}
              {{- end}}
            {{- end}}
          {{- end}}
        {{end}}EOF


  status:
    silent: true
    cmds:
      - for: { var: NODES, split: "\n" }
        task: '{{ (.ITEM | split ",")._4 }}:list:{{ (.ITEM | split ",")._0 }}'
        vars:
          HOST: '{{ (.ITEM | split ",")._1 }}'
          SSH_PORT: '{{ (.ITEM | split ",")._2 }}'
          SSH_LOGIN: '{{ (.ITEM | split ",")._3 }}'
          SSH_KEY: '{{ (.ITEM | split ",")._6 }}'
          ORCHESTRATOR: '{{ (.ITEM | split ",")._4 }}'
          NAMESPACE: '{{ .CONTAINER_NAMESPACE }}'


  apply:
    silent: true
    cmds:
      - for: { var: NODES, split: "\n" }
        task: 'host:{{ (.ITEM | split ",")._0 }}'
        vars:
          HOST: '{{ (.ITEM | split ",")._1 }}'
          SSH_PORT: '{{ (.ITEM | split ",")._2 }}'
          SSH_LOGIN: '{{ (.ITEM | split ",")._3 }}'
          SSH_KEY: '{{ (.ITEM | split ",")._6 }}'
          ORCHESTRATOR: '{{ (.ITEM | split ",")._4 }}'
          NAMESPACE: '{{ .CONTAINER_NAMESPACE }}'


  host:*:
    internal: true
    silent: true
    vars:
      HOSTNAME: '{{index .MATCH 0}}'
    cmds:
      - echo '{{.HOSTNAME}} '
      - task: 'host-requirements:{{.HOSTNAME}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          ORCHESTRATOR: '{{.ORCHESTRATOR}}'
      - task: 'host-ingress:{{.HOSTNAME}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          ORCHESTRATOR: '{{.ORCHESTRATOR}}'
      - task: 'host-users:{{.HOSTNAME}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          ORCHESTRATOR: '{{.ORCHESTRATOR}}'
          NAMESPACE: '{{.NAMESPACE}}'
      - echo


  host-requirements:*:
    internal: true
    silent: true
    vars:
      HOSTNAME: '{{index .MATCH 0}}'
      SSH: 'ssh {{.SSH_OPTIONS}} -i {{.SSH_KEY}} -p {{.SSH_PORT}} {{.SSH_LOGIN}}@{{.HOST}}'
      SUDO:
        sh: '{{.SSH}} command -v doas || {{.SSH}} command -v sudo || true'
    status:
      - '{{.SSH}} command -v {{.ORCHESTRATOR}} >/dev/null 2>&1'
    cmds:
      - echo 'Requirements on {{.HOSTNAME}} '
      - cmd: |
          command_exists() {
            {{.SSH}} command -v "$1" >/dev/null 2>&1
          }
          OS=$({{.SSH}} uname -s)
          case "${OS}" in
            Darwin)
              if command_exists brew; then
                {{.SSH}} brew update
                {{.SSH}} brew install {{.ORCHESTRATOR}}
              else
                echo "brew not found"
                exit 1
              fi
              ;;
            Linux)
              if {{.SSH}} grep -q "Alpine" /etc/os-release; then
                if command_exists apk; then
                  {{.SSH}} {{.SUDO}} apk update
                  {{.SSH}} {{.SUDO}} apk add {{.ORCHESTRATOR}}
                  {{.SSH}} {{.SUDO}} rc-update add {{.ORCHESTRATOR}} default
                else
                  echo "apk not found"
                  exit 1
                fi
              else
                if command_exists apt-get; then
                  {{.SSH}} {{.SUDO}} apt-get update
                  {{.SSH}} {{.SUDO}} apt-get install -y {{.ORCHESTRATOR}}
                  {{.SSH}} {{.SUDO}} systemctl daemon-reload
                  {{.SSH}} {{.SUDO}} systemctl enable --now {{.ORCHESTRATOR}}
                  {{.SSH}} {{.SUDO}} systemctl start {{.ORCHESTRATOR}}
                else
                  echo "apt-get not found"
                  exit 1
                fi
              fi
              ;;
            *)
              echo "unsupported operating system: ${OS}"
              exit 1
              ;;
          esac
        silent: true
        ignore_error: true


  host-ingress:*:
    internal: true
    silent: true
    vars:
      HOSTNAME: '{{index .MATCH 0}}'
      NAMESPACE: 'ingress'
      STATIC_RULES: |
        {{.HOSTNAME}}.{{.DNS_ZONE}},^/(vless-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$,http://$1:8080/
    cmds:
      - task: '{{.ORCHESTRATOR}}:network:{{.HOSTNAME}}:create:{{.NAMESPACE}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
      - task: '{{.ORCHESTRATOR}}:group:{{.HOSTNAME}}:create:{{.NAMESPACE}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
      - task: '{{.ORCHESTRATOR}}:container:{{.HOSTNAME}}:run:{{.NAMESPACE}}-gateway-reproxy'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          NAMESPACE: '{{.NAMESPACE}}'
          MEMORY: '{{.CONTAINER_MEMORY}}'
          VOLUMES: |
            -v ingress-reproxy-data:/data
            -v /run/{{.ORCHESTRATOR}}/{{.ORCHESTRATOR}}.sock:/var/run/docker.sock:ro
          PORTS: "-p 80:8080 -p 443:8443"
          ENVS: |
            -e 'LOGGER_STDOUT=true'
            -e 'SSL_TYPE=auto'
            -e 'SSL_ACME_LOCATION=/data'
            -e 'SSL_ACME_EMAIL=https-{{.HOSTNAME}}@{{.DNS_ZONE}}'
            -e 'DOCKER_ENABLED=true'
            -e 'DOCKER_AUTO=false'
            -e 'DOCKER_NETWORK=ingress'
            -e 'STATIC_ENABLED=true'
            -e 'STATIC_RULES={{.STATIC_RULES | splitLines | join ";"}}'
            -e 'MAX_SIZE=0'
            -e 'TIMEOUT_WRITE=1h'
          IMAGE: '{{.REPROXY_IMAGE}}'
          COMMAND: "--dbg"


  host-users:*:
    internal: true
    silent: true
    vars:
      HOSTNAME: '{{index .MATCH 0}}'
    cmds:
      - task: '{{.ORCHESTRATOR}}:network:{{.HOSTNAME}}:create:{{.NAMESPACE}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          ORCHESTRATOR: '{{.ORCHESTRATOR}}'
      - task: '{{.ORCHESTRATOR}}:group:{{.HOSTNAME}}:create:{{.NAMESPACE}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          ORCHESTRATOR: '{{.ORCHESTRATOR}}'
      - task: '{{.ORCHESTRATOR}}:prune:{{.HOSTNAME}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          ORCHESTRATOR: '{{.ORCHESTRATOR}}'
          NAMESPACE: '{{.NAMESPACE}}'
      - for: { var: USERS, split: "\n" }
        task: 'host-run:{{.HOSTNAME}}:user'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          ORCHESTRATOR: '{{.ORCHESTRATOR}}'
          NAMESPACE: '{{.NAMESPACE}}'
          USER_ID: '{{ (.ITEM | split ",")._0 }}'
          USER_LOGIN: '{{ (.ITEM | split ",")._1 }}'
          VLESS_HOSTS: '{{ (.ITEM | split ",")._2 }}'
          SHADOWSOCK_PORT: '{{ (.ITEM | split ",")._3 }}'
          SHADOWSOCK_PASS: '{{ (.ITEM | split ",")._4 }}'
          SHADOWSOCK_HOSTS: '{{ (.ITEM | split ",")._5 }}'


  host-prune:*:container:*:
    internal: true
    silent: true
    vars:
      HOSTNAME: '{{index .MATCH 0}}'
      CONTAINER: '{{index .MATCH 1}}'
      PROTOCOL: '{{ .CONTAINER | splitList "-" | first }}'
      ID: '{{ slice (.CONTAINER | splitList "-") 1 | join "-" }}'
      USER:
        sh: echo "{{.USERS}}" | grep '{{.ID}}' || echo ',-,^$,,,^$,'
      HOSTS: '{{ (.USER | split ",")._2 }}|{{ (.USER | split ",")._5 }}'
    status:
      - 'grep -q -E "{{.HOSTS}}" <<< "{{.HOSTNAME}}"'
    cmds:
      - task: '{{.ORCHESTRATOR}}:container:{{.HOSTNAME}}:remove:{{.CONTAINER}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'


  host-run:*:user:
    internal: true
    silent: true
    vars:
      HOSTNAME: '{{index .MATCH 0}}'
    cmds:
      - task: 'host-run:{{.HOSTNAME}}:user:vless-ws'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          ORCHESTRATOR: '{{.ORCHESTRATOR}}'
          NAMESPACE: '{{.NAMESPACE}}'
          UUID: '{{.USER_ID}}'
          LOGIN: '{{.USER_LOGIN}}'
          HOSTS: '{{.VLESS_HOSTS}}'
      - task: 'host-run:{{.HOSTNAME}}:user:shadowsocks'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          ORCHESTRATOR: '{{.ORCHESTRATOR}}'
          NAMESPACE: '{{.NAMESPACE}}'
          LOGIN: '{{.USER_LOGIN}}'
          PASS: '{{.SHADOWSOCK_PASS}}'
          PORT: '{{.SHADOWSOCK_PORT}}'
          HOSTS: '{{.SHADOWSOCK_HOSTS}}'


  host-run:*:user:vless-ws:
    internal: true
    silent: true
    vars:
      HOSTNAME: '{{index .MATCH 0}}'
    status:
      - 'grep -q -v -E "{{.HOSTS}}" <<< "{{.HOSTNAME}}"'
    cmds:
      - task: '{{.ORCHESTRATOR}}:container:{{.HOSTNAME}}:run:vless-{{.UUID}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          NAMESPACE: '{{.NAMESPACE}}'
          NETWORKS: '--network ingress'
          MEMORY: '{{.CONTAINER_MEMORY}}'
          OPTIONS: '--read-only'
          IMAGE: '{{.GLIDER_IMAGE}}'
          COMMAND: "-listen 'ws://:8080/,vless://{{.UUID}}@'"


  host-run:*:user:shadowsocks:
    internal: true
    silent: true
    vars:
      HOSTNAME: '{{index .MATCH 0}}'
    status:
      - "grep -q -v -E '{{.HOSTS}}' <<< '{{.HOSTNAME}}'"
    cmds:
      - task: '{{.ORCHESTRATOR}}:container:{{.HOSTNAME}}:run:{{.NAMESPACE}}-shadowsocks-{{.PORT}}'
        vars:
          HOST: '{{.HOST}}'
          SSH_PORT: '{{.SSH_PORT}}'
          SSH_LOGIN: '{{.SSH_LOGIN}}'
          SSH_KEY: '{{.SSH_KEY}}'
          NAMESPACE: '{{.NAMESPACE}}'
          MEMORY: '{{.CONTAINER_MEMORY}}'
          OPTIONS: '--read-only'
          PORTS: '--publish {{.PORT}}:{{.PORT}}'
          COMMAND: "-listen 'ss://{{.SHADOWSOCK_CIPHER}}:{{.PASS}}@:{{.PORT}}'"


  ssh:keys:generate:
    internal: true
    silent: true
    cmds:
      - mkdir -p '{{.SSH_KEYS_PATH}}'
      - for: { var: USERS, split: "\n" }
        cmd: |
          USER_ID='{{ (.ITEM | split ",")._0 }}'
          KEY_FILE="{{.SSH_KEYS_PATH}}/${USER_ID}_ed25519"
          test -f "${KEY_FILE}" && \
            echo "Key '${USER_ID}' exists" || \
            echo ssh-keygen -t "{{.SSH_KEYS_TYPE}}" -C "" -f "${KEY_FILE}"
